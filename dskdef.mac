;       CP/M 2.0 disk re-definition library
;
;       Copyright (c) 1979
;       Digital Research
;       Box 579
;       Pacific Grove, CA
;       93950
;
;       CP/M logical disk drives are defined using the
;       macros given below, where the sequence of calls
;       is:
;
;       disks   n
;       diskdef parameter-list-0
;       diskdef parameter-list-1
;       ...
;       diskdef parameter-list-n
;       endef
;
;       where n is the number of logical disk drives attached
;       to the CP/M system, and parameter-list-i defines the
;       characteristics of the ith drive (i=0,1,...,n-1)
;
;       each parameter-list-i takes the form
;               dn,fsc,lsc,[skf],bls,dks,dir,cks,ofs,[0]
;       where
;       dn      is the disk number 0,1,...,n-1
;       fsc     is the first sector number (usually 0 or 1)
;       lsc     is the last sector number on a track
;       skf     is optional "skew factor" for sector translate
;       bls     is the data block size (1024,2048,...,16384)
;       dks     is the disk size in bls increments (word)
;       dir     is the number of directory elements (word)
;       cks     is the number of dir elements to checksum
;       ofs     is the number of tracks to skip (word)
;       [0]     is an optional 0 which forces 16K/directory entry
;
;       for convenience, the form
;               dn,dm
;       defines disk dn as having the same characteristics as
;       a previously defined disk dm.
;
;       a standard four drive CP/M system is defined by
;               disks   4
;               diskdef 0,1,26,6,1024,243,64,64,2
;       dsk     set     0
;               rept    3
;       dsk     set     dsk+1
;               diskdef %dsk,0
;               endm
;               endef
;
;       the value of "begdat" at the end of assembly defines the
;       beginning of the uninitialize ram area above the bios,
;       while the value of "enddat" defines the next location
;       following the end of the data area.  the size of this
;       area is given by the value of "datsiz" at the end of the
;       assembly.  note that the allocation vector will be quite
;       large if a large disk size is defined with a small block
;       size.
;

dskhdr  macro   dn
;;      define a single disk header list
dpe_dn:	dw      xlt_dn,0000h    ;translate table
        dw      0000h,0000h     ;scratch area
        dw      dirbuf,dpb_dn   ;dir buff,parm block
        dw      csv_dn,alv_dn   ;check, alloc vectors
        endm
;
disks   macro   nd
;;      define nd disks
ndisks  set     nd              ;;for later reference
dpbase  equ     $               ;base of disk parameter blocks
;;        generate the nd elements
        dskhdr  0
		if		nd>1
        dskhdr  1
		endif
		if		nd>2
        dskhdr  2
		endif
		if		nd>3
        dskhdr  3
		endif
		if		nd>4
        dskhdr  4
		endif
		if		nd>5
        dskhdr  5
		endif
		if		nd>6
        dskhdr  6
		endif
		if		nd>7
        dskhdr  7
		endif
		if		nd>8
        dskhdr  8
		endif
		if		nd>9
        dskhdr  9
		endif
		if		nd>10
        dskhdr  10
		endif
		if		nd>11
        dskhdr  11
		endif
		if		nd>12
        dskhdr  12
		endif
		if		nd>13
        dskhdr  13
		endif
		if		nd>14
        dskhdr  14
		endif
		if		nd>15
        dskhdr  15
		endif

        endm
;
gcd     macro   m,n
;;      greatest common divisor of m,n
;;      produces value gcdn as result
;;      (used in sector translate table generation)
gcdm    set     m       ;;variable for m
gcdn    set     n       ;;variable for n
gcdr    set     0       ;;variable for r
        rept    65535
gcdx    set     gcdm/gcdn
gcdr    set     gcdm - gcdx*gcdn
        if      gcdr = 0
        exitm
        endif
gcdm    set     gcdn
gcdn    set     gcdr
        endm
        endm
;
diskdef macro   dn,fsc,lsc,skf,bls,dks,dir,cks,ofs,k16
;;      generate the set statements for later tables
        if		"lsc"==""
;;      current disk dn same as previous fsc
dpb_dn  equ     dpb_fsc         ;equivalent parameters
als_dn  equ     als_fsc         ;same allocation vector size
css_dn  equ     css_fsc         ;same checksum vector size
xlt_dn  equ     xlt_fsc         ;same translate table

        else
sectors set     lsc-(fsc)+1        ;;number of sectors
als_dn  set     (dks)/8         ;;size of allocation vector
        if      ((dks) # 8)<>0
als_dn  set     als_dn+1
        endif					;((dks) # 8)<>0
css_dn  set     (cks)/4         ;;number of checksum elements
;;      generate the block shift value
blkval  set     bls/128         ;;number of sectors/block
blkshf  set     0               ;;counts right 0's in blkval
blkmsk  set     0               ;;fills with 1's from right
        rept    16              ;;once for each bit position
        if      blkval=1
        exitm
        endif					;blkval=1
;;      otherwise, high order 1 not found yet
blkshf  set     blkshf+1
blkmsk  set     (blkmsk << 1) | 1
blkval  set     blkval/2
        endm
;;      generate the extent mask byte
blkval  set     bls/1024        ;;number of kilobytes/block
extmsk  set     0               ;;fill from right with 1's
        rept    16
        if      blkval=1
        exitm
        endif
;;      otherwise more to shift
extmsk  set     (extmsk << 1) | 1
blkval  set     blkval/2
        endm
;;      may be double byte allocation
        if      (dks) > 256
extmsk  set     (extmsk >> 1)
        endif
;;      may be optional [0] in last position
        if		"k16"<>""
extmsk  set     k16
        endif
;;      now generate directory reservation bit vector
dirrem  set     dir             ;;# remaining to process
dirbks  set     bls/32          ;;number of entries per block
dirblk  set     0               ;;fill with 1's on each loop
        rept    16
        if      dirrem=0
        exitm
        endif
;;      not complete, iterate once again
;;      shift right and add 1 high order bit
dirblk  set     ((dirblk << 1) & 0ffffh) | 8000h
        if      dirrem > dirbks
dirrem  set     dirrem-dirbks
        else
dirrem  set     0
        endif
        endm
		
;;disk parm block
dpb_dn	equ		$
		dw     sectors			;sec per track
        db      blkshf			;block shift
        db		blkmsk			;block mask
        db		extmsk			;extnt mask
        dw     (dks)-1			;disk size-1
        dw     (dir)-1			;directory max
        db     dirblk >> 8		;alloc0
        db     dirblk & 0ffh	;alloc1
        dw     (cks)/4			;check size
        dw     ofs				;offset
;;      generate the translate table, if requested
        if		"skf"==""
xlt_dn  equ     0               ;no xlate table
        else
        if      skf = 0
xlt_dn  equ     0               ;no xlate table
        else
;;        generate the translate table
nxtsec  set     0               ;;next sector to fill
nxtbas  set     0               ;;moves by one on overflow
        gcd     sectors,skf
;;      gcdn = gcd(sectors,skew)
neltst  set     sectors/gcdn
;;      neltst is number of elements to generate
;;      before we overlap previous elements
nelts   set     neltst          ;;counter
xlt_dn  equ     $               ;translate table
        rept    sectors         ;;once for each sector
        if      sectors < 256
        db     nxtsec+(fsc)
        else
        dw     nxtsec+(fsc)
        endif
nxtsec  set     nxtsec+(skf)
        if      nxtsec >= sectors
nxtsec  set     nxtsec-sectors
        endif
nelts   set     nelts-1
        if      nelts = 0
nxtbas  set     nxtbas+1
nxtsec  set     nxtbas
nelts   set     neltst
        endif
        endm
        endif   ;;end of nul fac test
        endif   ;;end of nul bls test
		endif 	;????
        endm
;
endef   macro
;;      generate the necessary ram data areas
begdat  equ     $
dirbuf	equ     $
		ds      128             ;directory access buffer

alv_0	equ		$
		ds		als_0
csv_0	equ		$
		ds		css_0

		if		ndisks>1
alv_1	equ		$
		ds		als_1
csv_1	equ		$
		ds		css_1
		endif
		if		ndisks>2
alv_2	equ		$
		ds		als_2
csv_2	equ		$
		ds		css_2
		endif
		if		ndisks>3
alv_3	equ		$
		ds		als_3
csv_3	equ		$
		ds		css_3
		endif
		if		ndisks>4
alv_4	equ		$
		ds		als_4
csv_4	equ		$
		ds		css_4
		endif
		if		ndisks>5
alv_5	equ		$
		ds		als_5
csv_5	equ		$
		ds		css_5
		endif
		if		ndisks>6
alv_6	equ		$
		ds		als_6
csv_6	equ		$
		ds		css_6
		endif
		if		ndisks>7
alv_7	equ		$
		ds		als_7
csv_7	equ		$
		ds		css_7
		endif
		if		ndisks>8
alv_8	equ		$
		ds		als_8
csv_8	equ		$
		ds		css_8
		endif
		if		ndisks>9
alv_9	equ		$
		ds		als_9
csv_9	equ		$
		ds		css_9
		endif
		if		ndisks>10
alv_10	equ		$
		ds		als_10
csv_10	equ		$
		ds		css_10
		endif
		if		ndisks>11
alv_11	equ		$
		ds		als_11
csv_11	equ		$
		ds		css_11
		endif
		if		ndisks>12
alv_12	equ		$
		ds		als_12
csv_12	equ		$
		ds		css_12
		endif
		if		ndisks>13
alv_13	equ		$
		ds		als_13
csv_13	equ		$
		ds		css_13
		endif
		if		ndisks>14
alv_14	equ		$
		ds		als_14
csv_14	equ		$
		ds		css_14
		endif
		if		ndisks>15
alv_15	equ		$
		ds		als_15
csv_15	equ		$
		ds		css_15
		endif
		
enddat  equ     $
datsiz  equ     $-begdat
;;      db 0 at this point forces hex record
        endm
;